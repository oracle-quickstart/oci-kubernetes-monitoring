# Copyright (c) 2023, 2024, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v1.0 as shown at https://oss.oracle.com/licenses/upl.
{{- if .Values.enableEKSControlPlaneLogs }}
{{- $kubernetesClusterName := (include "logan.kubernetesClusterName" .) }}
{{- $kubernetesClusterId := (include "logan.kubernetesClusterId" .) }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "logan.resourceNamePrefix" . }}-ekscp-logs
  namespace: {{ include "logan.namespace" . }}
data:
  # file-like keys
  fluent.conf: |
 
    {{- $authtype := .Values.authtype | lower }}

    {{- $multiWorkersEnabled := false }}
    {{- $workers := (int .Values.fluentd.multiProcessWorkers | default 0) }}
    {{- if gt $workers 0 }}
    {{- $multiWorkersEnabled = true }}
    <system>
      workers {{ $workers }}
    </system> 
    {{- else }}
      {{- /* fake it to run at least one range loop if no multiProcessWorkers enabled. */}}
      {{- $workers = 1 }}
    {{- end }}
    
    {{- range until $workers }}
    {{- $currWorker := . }}
    
    {{- if $multiWorkersEnabled }}  
    <worker {{ $currWorker }}>
    {{- end }}

    # To ignore all the fluentd core generated events
    <label @FLUENT_LOG{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}>
       <match fluent.**>
       @type null
       @id ignore_fluent_logs{{- ternary (print "_" $currWorker) "" $multiWorkersEnabled }}
       </match>
    </label>

    {{- if $.Values.fluentd.eksControlPlane }}
 
    {{- range $name, $logDefinition := $.Values.fluentd.eksControlPlane.logs }}
    {{- $workerId := 0 }}
    {{- if $multiWorkersEnabled }}
      {{- if and (eq "audit" $name) (eq "cloudwatch" $.Values.fluentd.eksControlPlane.collectionType) }}
        {{- if $.Values.fluentd.eksControlPlane.logs.apiserver.worker }}
          {{ $workerId = $.Values.fluentd.eksControlPlane.logs.apiserver.worker }}
        {{- else if $.Values.fluentd.eksControlPlane.worker }}
          {{ $workerId = $.Values.fluentd.eksControlPlane.worker }}
        {{- end }}
      {{- else }}
        {{- if $logDefinition.worker }}
          {{ $workerId = $logDefinition.worker }}
        {{- else if $.Values.fluentd.eksControlPlane.worker }}
          {{ $workerId = $.Values.fluentd.eksControlPlane.worker }}
        {{- end }}
      {{- end }}
    {{- end }}
    {{- if eq $currWorker (int $workerId) }}
    
    {{- if eq "cloudwatch" $.Values.fluentd.eksControlPlane.collectionType }}
    {{- if eq "apiserver" $name }}
    <source>
       @type cloudwatch_logs
       @id {{ $name }}{{- ternary (print "_" $currWorker) "" $multiWorkersEnabled }}
       tag rewrite.eks{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.cp.{{ $name }}.*
       region {{ $.Values.fluentd.eksControlPlane.region | required (printf "fluentd.eksControlPlane.region is required") }}
       {{- if eq $.Values.fluentd.eksControlPlane.awsUseSts true }}
       aws_use_sts true
       aws_sts_role_arn "{{ $.Values.fluentd.eksControlPlane.awsStsRoleArn | required (printf "fluentd.eksControlPlane.awsStsRoleArn is required") }}"
       {{- else }}
       aws_key_id "{{ $.Values.fluentd.eksControlPlane.awsKeyId | required (printf "fluentd.eksControlPlane.awsKeyId is required") }}"
       aws_sec_key "{{ $.Values.fluentd.eksControlPlane.awsSecKey | required (printf "fluentd.eksControlPlane.awsSecKey is required") }}"
       {{- end }}
       {{- if $.Values.fluentd.eksControlPlane.cwLogGroupName }}
       log_group_name "{{ $.Values.fluentd.eksControlPlane.cwLogGroupName }}"
       {{- else if contains "/" $kubernetesClusterId}}
       {{- $clusterNameFromId := (splitList "/" $kubernetesClusterId) | last }}
       log_group_name "{{ printf "/aws/eks/%s/cluster" $clusterNameFromId }}"
       {{- end }}
       use_log_stream_name_prefix true
       log_stream_name {{ $logDefinition.cwLogStreamName | required (printf "fluentd.eksControlPlane.logs.%s.cwLogStreamName is required" $name) }}
       include_metadata true
       <storage>
         @type local
         path {{ $.Values.fluentd.baseDir }}/oci_la_fluentd_outplugin/pos/ekscp.{{ $name }}.logs.pos
       </storage>
       <parse>
         @type none
       </parse>
    </source>
    <match rewrite.eks{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.cp.{{ $name }}.**>
       @type rewrite_tag_filter
       hostname_command "cat /etc/hostname"
       <rule>
       key message
       pattern /\\?"kind\\?":\\?"Event\\?"/
       tag eks{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.cp.audit.*
       </rule>
       <rule>
       key message
       pattern /\\?"kind\\?":\\?"Event\\?"/
       invert true
       tag eks{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.cp.{{ $name }}.*
       </rule>
    </match>    
    {{- end }}

    {{- if or (eq "authenticator" $name) (eq "kubecontrollermanager" $name) (eq "cloudcontrollermanager" $name) (eq "scheduler" $name) }}
    <source>
       @type cloudwatch_logs
       @id {{ $name }}{{- ternary (print "_" $currWorker) "" $multiWorkersEnabled }}
       tag eks{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.cp.{{ $name }}.*
       region {{ $.Values.fluentd.eksControlPlane.region | required (printf "fluentd.eksControlPlane.region is required") }}
       {{- if eq $.Values.fluentd.eksControlPlane.awsUseSts true }}
       aws_use_sts true
       aws_sts_role_arn "{{ $.Values.fluentd.eksControlPlane.awsStsRoleArn | required (printf "fluentd.eksControlPlane.awsStsRoleArn is required") }}"
       {{- else }}
       aws_key_id "{{ $.Values.fluentd.eksControlPlane.awsKeyId | required (printf "fluentd.eksControlPlane.awsKeyId is required") }}"
       aws_sec_key "{{ $.Values.fluentd.eksControlPlane.awsSecKey | required (printf "fluentd.eksControlPlane.awsSecKey is required") }}"
       {{- end }}
       {{- if $.Values.fluentd.eksControlPlane.cwLogGroupName }}
       log_group_name "{{ $.Values.fluentd.eksControlPlane.cwLogGroupName }}"
       {{- else if contains "/" $kubernetesClusterId}}
       {{- $clusterNameFromId := (splitList "/" $kubernetesClusterId) | last }}
       log_group_name "{{ printf "/aws/eks/%s/cluster" $clusterNameFromId }}"
       {{- end }}
       use_log_stream_name_prefix true
       log_stream_name {{ $logDefinition.cwLogStreamName | required (printf "fluentd.eksControlPlane.logs.%s.cwLogStreamName is required" $name) }}
       include_metadata true
       <storage>
       @type local
       path {{ $.Values.fluentd.baseDir }}/oci_la_fluentd_outplugin/pos/ekscp.{{ $name }}.logs.pos
       </storage>
       <parse>
       @type none
       </parse>
    </source>
    {{- end }}

    <filter eks{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.cp.{{ $name }}.**>
       @type record_transformer
       enable_ruby true
       <record>
       {{- if $logDefinition.metadata }}
       oci_la_metadata ${{"{{"}}"Kubernetes Cluster Name":"{{ $kubernetesClusterName }}", "Kubernetes Cluster ID": "{{ $kubernetesClusterId }}", "Node": "#{ENV['K8S_NODE_NAME'] || 'UNDEFINED'}" {{- range $k, $v := $logDefinition.metadata }},{{ $k | quote }}: {{ $v | quote -}} {{- end }}{{"}}"}}
       {{- else if $.Values.fluentd.eksControlPlane.metadata }}
       oci_la_metadata ${{"{{"}}"Kubernetes Cluster Name":"{{ $kubernetesClusterName }}", "Kubernetes Cluster ID": "{{ $kubernetesClusterId }}", "Node": "#{ENV['K8S_NODE_NAME'] || 'UNDEFINED'}" {{- range $k, $v := $.Values.fluentd.eksControlPlane.metadata }},{{ $k | quote }}: {{ $v | quote -}} {{- end }}{{"}}"}}
       {{- else }}
       oci_la_metadata ${{"{{"}}"Kubernetes Cluster Name":"{{ $kubernetesClusterName }}", "Kubernetes Cluster ID": "{{ $kubernetesClusterId }}", "Node": "#{ENV['K8S_NODE_NAME'] || 'UNDEFINED'}" {{- range $k, $v := $.Values.metadata }},{{ $k | quote }}: {{ $v | quote -}} {{- end }}{{"}}"}}
       {{- end }}
       {{- if $logDefinition.ociLALogGroupID }}
       oci_la_log_group_id "{{ $logDefinition.ociLALogGroupID }}"
       {{- else if $.Values.fluentd.eksControlPlane.ociLALogGroupID }}
       oci_la_log_group_id "{{ $.Values.fluentd.eksControlPlane.ociLALogGroupID }}"
       {{- else }}
       oci_la_log_group_id "{{ required "ociLALogGroupID is required" $.Values.ociLALogGroupID }}"
       {{- end }}
       oci_la_log_source_name "{{ $logDefinition.ociLALogSourceName | required (printf "fluentd.eksControlPlane.logs.%s.ociLALogSourceName is required" $name) }}"
       {{- if $logDefinition.ociLALogSet }}
       oci_la_log_set "{{ $logDefinition.ociLALogSet }}"
       {{- else }}
       oci_la_log_set "{{ $.Values.fluentd.eksControlPlane.ociLALogSet | default $.Values.ociLALogSet }}"
       {{- end }}
       message "${record['message']}"
       tag ${tag}
       </record>
    </filter>
    <filter eks{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.cp.{{ $name }}.**>
      @type record_transformer
      enable_ruby true
      <record>
        oci_la_metadata ${record["oci_la_metadata"].merge({"cloudwatchloggroupname" => record.dig("metadata", "log_group_name"), "cloudwatchlogstreamname" => record.dig("metadata", "log_stream_name")})}
      </record>
      remove_keys $.metadata
    </filter>

    {{- else }}
    <source>
       @type s3
       @id {{ $name }}{{- ternary (print "_" $currWorker) "" $multiWorkersEnabled }}
       tag eks{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.cp.{{ $name }}.*
       s3_bucket {{ $.Values.fluentd.eksControlPlane.s3Bucket | required (printf "fluentd.eksControlPlane.s3Bucket is required") }}
       s3_region {{ $.Values.fluentd.eksControlPlane.region | required (printf "fluentd.eksControlPlane.region is required") }}
       {{- if eq $.Values.fluentd.eksControlPlane.awsUseSts true }}
       <assume_role_credentials>
         role_arn "{{ $.Values.fluentd.eksControlPlane.awsStsRoleArn | required (printf "fluentd.eksControlPlane.awsStsRoleArn is required") }}"
         role_session_name oci-kubernetes-monitoring
       </assume_role_credentials>
       {{- else }}
         aws_key_id "{{ $.Values.fluentd.eksControlPlane.awsKeyId | required (printf "fluentd.eksControlPlane.awsKeyId is required") }}"
         aws_sec_key "{{ $.Values.fluentd.eksControlPlane.awsSecKey | required (printf "fluentd.eksControlPlane.awsSecKey is required") }}"
       {{- end }}
       add_object_metadata true
       store_as gzip
       <sqs>
         queue_name {{ $logDefinition.sqsQueue }}
       </sqs>
       match_regexp {{ $logDefinition.objectKey }}.*
       <parse>
         @type none
       </parse>
    </source>
    {{- if $logDefinition.multilineStartRegExp }}
    # Concat filter to handle multi-line log records.
    <filter eks{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.cp.{{ $name }}.**>
       @type concat
       key message
       stream_identity_key stream
       flush_interval "{{ $.Values.fluentd.tailPlugin.flushInterval }}"
       timeout_label "@NORMAL{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}"
       multiline_start_regexp {{ $logDefinition.multilineStartRegExp }}
    </filter>
    {{- end }}
    <filter eks{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.cp.{{ $name }}.**>
       @type record_transformer
       enable_ruby true
       <record>
       {{- if $logDefinition.metadata }}
       oci_la_metadata ${{"{{"}}"Kubernetes Cluster Name":"{{ $kubernetesClusterName }}", "Kubernetes Cluster ID": "{{ $kubernetesClusterId }}", "Node": "#{ENV['K8S_NODE_NAME'] || 'UNDEFINED'}" {{- range $k, $v := $logDefinition.metadata }},{{ $k | quote }}: {{ $v | quote -}} {{- end }}{{"}}"}}
       {{- else if $.Values.fluentd.eksControlPlane.metadata }}
       oci_la_metadata ${{"{{"}}"Kubernetes Cluster Name":"{{ $kubernetesClusterName }}", "Kubernetes Cluster ID": "{{ $kubernetesClusterId }}", "Node": "#{ENV['K8S_NODE_NAME'] || 'UNDEFINED'}" {{- range $k, $v := $.Values.fluentd.eksControlPlane.metadata }},{{ $k | quote }}: {{ $v | quote -}} {{- end }}{{"}}"}}
       {{- else }}
       oci_la_metadata ${{"{{"}}"Kubernetes Cluster Name":"{{ $kubernetesClusterName }}", "Kubernetes Cluster ID": "{{ $kubernetesClusterId }}", "Node": "#{ENV['K8S_NODE_NAME'] || 'UNDEFINED'}" {{- range $k, $v := $.Values.metadata }},{{ $k | quote }}: {{ $v | quote -}} {{- end }}{{"}}"}}
       {{- end }}
       {{- if $logDefinition.ociLALogGroupID }}
       oci_la_log_group_id "{{ $logDefinition.ociLALogGroupID }}"
       {{- else if $.Values.fluentd.eksControlPlane.ociLALogGroupID }}
       oci_la_log_group_id "{{ $.Values.fluentd.eksControlPlane.ociLALogGroupID }}"
       {{- else }}
       oci_la_log_group_id "{{ required "ociLALogGroupID is required" $.Values.ociLALogGroupID }}"
       {{- end }}
       oci_la_log_source_name "{{ $logDefinition.ociLALogSourceName | required (printf "fluentd.eksControlPlane.logs.%s.ociLALogSourceName is required" $name) }}"
       {{- if $logDefinition.ociLALogSet }}
       oci_la_log_set "{{ $logDefinition.ociLALogSet }}"
       {{- else }}
       oci_la_log_set "{{ $.Values.fluentd.eksControlPlane.ociLALogSet | default $.Values.ociLALogSet }}"
       {{- end }}
       message "${record['message']}"
       tag ${tag}
       </record>
    </filter>
    <filter eks{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.cp.{{ $name }}.**>
      @type record_transformer
      enable_ruby true
      <record>
        oci_la_metadata ${record["oci_la_metadata"].merge({"cloudwatchloggroupname" => record["s3_key"].split("/")[0].gsub("_", "/"), "cloudwatchlogstreamname" => record["s3_key"].split("/")[2].gsub("_", "/")})}
      </record>
      remove_keys $.metadata
    </filter> 
    {{- end }}

    {{- end }}
    {{- end }}
    {{- end }}

    # Match block to ensure all the logs including concat plugin timeout logs will have same label
    <match eks{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.cp.**>
       @type relabel
       @label @NORMAL{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}
    </match>

    # Match block to set info required for oci-logging-analytics fluentd output plugin
    <label @NORMAL{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}>
       <match eks{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.cp.**>
          @type oci-logging-analytics
          enable_ruby               true
          namespace                 "{{ $.Values.ociLANamespace }}"
          endpoint                  "{{ $.Values.fluentd.ociLoggingAnalyticsOutputPlugin.endpoint }}"
          {{- if eq $authtype "config" }}
          config_file_location      {{ $.Values.oci.path }}/{{ $.Values.oci.file }}
          profile_name              "{{ $.Values.fluentd.ociLoggingAnalyticsOutputPlugin.profile_name }}"
          {{- end }}
          plugin_log_location       "{{ $.Values.fluentd.baseDir }}"
          plugin_log_level          "{{ $.Values.fluentd.ociLoggingAnalyticsOutputPlugin.plugin_log_level }}"
          plugin_log_file_size      "{{ $.Values.fluentd.ociLoggingAnalyticsOutputPlugin.plugin_log_file_size }}"
          plugin_log_file_count     "{{ $.Values.fluentd.ociLoggingAnalyticsOutputPlugin.plugin_log_file_count }}"
          # TODO
          kubernetes_metadata_keys_mapping     {"container_name":"Container","namespace_name":"Namespace","pod_name":"Pod","container_image":"Container Image Name","host":"Node"}
          <buffer>
                @type                           file
                path                            {{ $.Values.fluentd.baseDir }}/oci_la_fluentd_outplugin/ekscplogs/buffer{{- ternary (print "/worker-" $currWorker) "" $multiWorkersEnabled }}/
                flush_thread_count              "{{ $.Values.fluentd.ociLoggingAnalyticsOutputPlugin.buffer.flush_thread_count }}"
                chunk_limit_size                "2m"
                total_limit_size                "{{ $.Values.fluentd.ociLoggingAnalyticsOutputPlugin.buffer.total_limit_size }}"
                flush_interval                  "{{ $.Values.fluentd.ociLoggingAnalyticsOutputPlugin.buffer.flush_interval }}"
                flush_thread_interval           "{{ $.Values.fluentd.ociLoggingAnalyticsOutputPlugin.buffer.flush_thread_interval }}"
                flush_thread_burst_interval     "{{ $.Values.fluentd.ociLoggingAnalyticsOutputPlugin.buffer.flush_thread_burst_interval }}"
                retry_wait                      "{{ $.Values.fluentd.ociLoggingAnalyticsOutputPlugin.buffer.retry_wait }}"
                retry_max_times                 "{{ $.Values.fluentd.ociLoggingAnalyticsOutputPlugin.buffer.retry_max_times }}"
                retry_exponential_backoff_base  "{{ $.Values.fluentd.ociLoggingAnalyticsOutputPlugin.buffer.retry_exponential_backoff_base }}"
                retry_forever                   "{{ $.Values.fluentd.ociLoggingAnalyticsOutputPlugin.buffer.retry_forever }}"
                disable_chunk_backup "{{ $.Values.fluentd.ociLoggingAnalyticsOutputPlugin.buffer.disable_chunk_backup }}"
          </buffer>
       </match>
    </label>

    {{- if $multiWorkersEnabled }}  
          
    </worker>
    {{- end }}
    {{- end }}
{{- end }}
