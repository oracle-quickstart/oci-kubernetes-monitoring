# Copyright (c) 2023, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v1.0 as shown at https://oss.oracle.com/licenses/upl.

{{- $kubernetesClusterName := (include "logan.kubernetesClusterName" .) }}
{{- $kubernetesClusterId := (include "logan.kubernetesClusterId" .) }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "logan.resourceNamePrefix" . }}-logs
  namespace: {{ include "logan.namespace" . }}
data:
  # file-like keys
  fluent.conf: |
 
    {{- $authtype := .Values.authtype | lower }}
    {{- $runtime := .Values.runtime | lower }}
    {{- $excludePath := join ", " .Values.fluentd.genericContainerLogs.exclude_path }}

    {{- $multiWorkersEnabled := false }}
    {{- $workers := (int .Values.fluentd.multiProcessWorkers | default 0) }}
    {{- if gt $workers 0 }}
    {{- $multiWorkersEnabled = true }}
    <system>
      workers {{ $workers }}
    </system> 
    {{- else }}
      {{- /* fake it to run at least one range loop if no multiProcessWorkers enabled. */}}
      {{- $workers = 1 }}
    {{- end }}
    
    {{- range until $workers }}
    {{- $currWorker := . }}
    
    {{- if $multiWorkersEnabled }}  
    <worker {{ $currWorker }}>
    {{- end }}

    # To ignore all the fluentd core generated events
    # To ignore all the fluentd core generated events
    <label @FLUENT_LOG{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}>
       <match fluent.**>
       @type null
       @id ignore_fluent_logs{{- ternary (print "_" $currWorker) "" $multiWorkersEnabled }}
       </match>
    </label>

    {{- if $.Values.fluentd.kubernetesSystem }}
 
    {{- range $name, $logDefinition := $.Values.fluentd.kubernetesSystem.logs }}
    {{- $workerId := 0 }}
    {{- if $multiWorkersEnabled }}
      {{- if $logDefinition.worker }}
        {{ $workerId = $logDefinition.worker }}
      {{- else if $.Values.fluentd.kubernetesSystem.worker }}
        {{ $workerId = $.Values.fluentd.kubernetesSystem.worker }}
      {{- end }}
    {{- end }}
    {{- if eq $currWorker (int $workerId) }}
    
    <source>
       @type tail
       @id {{ $name }}{{- ternary (print "_" $currWorker) "" $multiWorkersEnabled }}
       path_key tailed_path
       path {{ $logDefinition.path | required (printf "fluentd.kubernetesSystem.logs.%s.path is required" $name) }}
       pos_file {{ $.Values.fluentd.baseDir }}/oci_la_fluentd_outplugin/pos/{{ $name }}.logs.pos
       tag oci{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.oke.{{ $name }}.*
       read_from_head "{{ $.Values.fluentd.tailPlugin.readFromHead }}"
       {{- if $logDefinition.encoding }}
       encoding {{ $logDefinition.encoding }}
       {{- else if $.Values.fluentd.kubernetesSystem.encoding }}
       encoding {{ $.Values.fluentd.kubernetesSystem.encoding }}
       {{- else if $.Values.fluentd.tailPlugin.encoding }}
       encoding {{ $.Values.fluentd.tailPlugin.encoding }}
       {{- end }}
       <parse>
       {{- if eq $name "kube-audit" }}
       @type none
       {{- else if eq $runtime "docker" }}
       @type json
       {{- else}}
       @type cri
       {{- end }}
       </parse>
    </source>
    <filter oci{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.oke.{{ $name }}.**>
       @type record_transformer
       enable_ruby true
       <record>
       {{- if $logDefinition.metadata }}
       oci_la_metadata ${{"{{"}}"Kubernetes Cluster Name":"{{ $kubernetesClusterName }}", "Kubernetes Cluster ID": "{{ $kubernetesClusterId }}" {{- range $k, $v := $logDefinition.metadata }},{{ $k | quote }}: {{ $v | quote -}} {{- end }}{{"}}"}}
       {{- else if $.Values.fluentd.kubernetesSystem.metadata }}
       oci_la_metadata ${{"{{"}}"Kubernetes Cluster Name":"{{ $kubernetesClusterName }}", "Kubernetes Cluster ID": "{{ $kubernetesClusterId }}" {{- range $k, $v := $.Values.fluentd.kubernetesSystem.metadata }},{{ $k | quote }}: {{ $v | quote -}} {{- end }}{{"}}"}}
       {{- else }}
       oci_la_metadata ${{"{{"}}"Kubernetes Cluster Name":"{{ $kubernetesClusterName }}", "Kubernetes Cluster ID": "{{ $kubernetesClusterId }}" {{- range $k, $v := $.Values.metadata }},{{ $k | quote }}: {{ $v | quote -}} {{- end }}{{"}}"}}
       {{- end }}
       {{- if $logDefinition.ociLALogGroupID }}
       oci_la_log_group_id "{{ $logDefinition.ociLALogGroupID }}"
       {{- else if $.Values.fluentd.kubernetesSystem.ociLALogGroupID }}
       oci_la_log_group_id "{{ $.Values.fluentd.kubernetesSystem.ociLALogGroupID }}"
       {{- else }}
       oci_la_log_group_id "{{ required "ociLALogGroupID is required" $.Values.ociLALogGroupID }}"
       {{- end }}
       oci_la_log_path "${record['tailed_path']}"
       oci_la_log_source_name "{{ $logDefinition.ociLALogSourceName | required (printf "fluentd.kubernetesSystem.logs.%s.ociLALogSourceName is required" $name) }}"
       {{- if $logDefinition.ociLALogSet }}
       oci_la_log_set "{{ $logDefinition.ociLALogSet }}"
       {{- else }}
       oci_la_log_set "{{ $.Values.fluentd.kubernetesSystem.ociLALogSet | default $.Values.ociLALogSet }}"
       {{- end }}
       {{- if eq $runtime "docker" }}
       message "${record['log']}"
       {{- end }}
       tag ${tag}
       </record>
    </filter>
    # Concat filter to handle partial logs in CRI/ContainerD
    # Docker can also have partial logs but handling is different for different docker versions. Considering Kubernetes/OKE moved to ContainerD/CRI since last 4-5 releases, ignoring docker handling.
    # This filter can not be clubbed with concat filter for multiline as both are mutually exclusive.
    {{- if and (ne $name "kube-audit") (eq $runtime "cri") }}
    <filter oci{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.oke.{{ $name }}.**>
      @type concat
      key message
      use_partial_cri_logtag true
      partial_cri_logtag_key logtag
      partial_cri_stream_key stream
      # timeout scenario should not occur in general for partial logs handling
      timeout_label "@NORMAL{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}"
    </filter>
    {{- end }}
    {{- if $logDefinition.multilineStartRegExp }}
    # Concat filter to handle multi-line log records.
    <filter oci{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.oke.{{ $name }}.**>
       @type concat
       key message
       stream_identity_key stream
       flush_interval "{{ $.Values.fluentd.tailPlugin.flushInterval }}"
       timeout_label "@NORMAL{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}"
       multiline_start_regexp {{ $logDefinition.multilineStartRegExp }}
    </filter>
    {{- end }}
    {{- end }}
    {{- end }}
    {{- end }}

    {{- if $.Values.fluentd.linuxSystem }}

    {{- range $name, $logDefinition := $.Values.fluentd.linuxSystem.logs }}
    {{- $workerId := 0 }}
    {{- if $multiWorkersEnabled }}
      {{- if $logDefinition.worker }}
        {{ $workerId = $logDefinition.worker }}
      {{- else if $.Values.fluentd.linuxSystem.worker }}
        {{ $workerId = $.Values.fluentd.linuxSystem.worker }}
      {{- end }}
    {{- end }}
    {{- if eq $currWorker (int $workerId) }}

    {{- if and (ne $name "syslog") (ne $name "kubeletlog") }}
    
    <source>
       @type tail
       @id {{ $name }}{{- ternary (print "_" $currWorker) "" $multiWorkersEnabled }}
       path_key tailed_path
       path {{ $logDefinition.path | required (printf "fluentd.linuxSystem.logs.%s.path is required" $name) }}
       pos_file {{ $.Values.fluentd.baseDir }}/oci_la_fluentd_outplugin/pos/{{ $name }}.logs.pos
       tag oci{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.oke.{{ $name }}.*
       read_from_head "{{ $.Values.fluentd.tailPlugin.readFromHead }}"
       {{- if $logDefinition.encoding }}
       encoding {{ $logDefinition.encoding }}
       {{- else if $.Values.fluentd.linuxSystem.encoding }}
       encoding {{ $.Values.fluentd.linuxSystem.encoding }}
       {{- else if $.Values.fluentd.tailPlugin.encoding }}
       encoding {{ $.Values.fluentd.tailPlugin.encoding }}
       {{- end }}
       <parse>
       {{- if $logDefinition.multilineStartRegExp }}
       @type multiline
       format_firstline {{ $logDefinition.multilineStartRegExp }}
       format1 /^(?<message>.*)/
       {{- else }}
       @type none
       {{- end }}
       </parse>
    </source>
    <filter oci{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.oke.{{ $name }}.**>
       @type record_transformer
       enable_ruby true
       <record>
       {{- if $logDefinition.metadata }}
       oci_la_metadata ${{"{{"}}"Kubernetes Cluster Name":"{{ $kubernetesClusterName }}", "Kubernetes Cluster ID": "{{ $kubernetesClusterId }}", "Node": "#{ENV['K8S_NODE_NAME'] || 'UNDEFINED'}" {{- range $k, $v := $logDefinition.metadata }},{{ $k | quote }}: {{ $v | quote -}} {{- end }}{{"}}"}}
       {{- else if $.Values.fluentd.linuxSystem.metadata }}
       oci_la_metadata ${{"{{"}}"Kubernetes Cluster Name":"{{ $kubernetesClusterName }}", "Kubernetes Cluster ID": "{{ $kubernetesClusterId }}", "Node": "#{ENV['K8S_NODE_NAME'] || 'UNDEFINED'}" {{- range $k, $v := $.Values.fluentd.linuxSystem.metadata }},{{ $k | quote }}: {{ $v | quote -}} {{- end }}{{"}}"}}
       {{- else }}
       oci_la_metadata ${{"{{"}}"Kubernetes Cluster Name":"{{ $kubernetesClusterName }}", "Kubernetes Cluster ID": "{{ $kubernetesClusterId }}", "Node": "#{ENV['K8S_NODE_NAME'] || 'UNDEFINED'}" {{- range $k, $v := $.Values.metadata }},{{ $k | quote }}: {{ $v | quote -}} {{- end }}{{"}}"}}
       {{- end }}
       {{- if $logDefinition.ociLALogGroupID }}
       oci_la_log_group_id "{{ $logDefinition.ociLALogGroupID }}"
       {{- else if $.Values.fluentd.linuxSystem.ociLALogGroupID }}
       oci_la_log_group_id "{{ $.Values.fluentd.linuxSystem.ociLALogGroupID }}"
       {{- else }}
       oci_la_log_group_id "{{ required "ociLALogGroupID is required" $.Values.ociLALogGroupID }}"
       {{- end }}
       oci_la_log_path "${record['tailed_path']}"
       oci_la_log_source_name "{{ $logDefinition.ociLALogSourceName | required (printf "fluentd.linuxSystem.logs.%s.ociLALogSourceName is required" $name) }}"
       {{- if $logDefinition.ociLALogSet }}
       oci_la_log_set "{{ $logDefinition.ociLALogSet }}"
       {{- else }}
       oci_la_log_set "{{ $.Values.fluentd.linuxSystem.ociLALogSet | default $.Values.ociLALogSet }}"
       {{- end }}
       tag ${tag}
       </record>
    </filter>
    {{- end }}
    {{- end }}
    {{- end }}
    {{- end }}

    {{- if $.Values.fluentd.linuxSystem.logs.syslog }}
    
    {{- $workerId := 0 }}
    {{- if $multiWorkersEnabled }}
      {{- if $.Values.fluentd.linuxSystem.logs.syslog.worker }}
        {{ $workerId = $.Values.fluentd.linuxSystem.logs.syslog.worker }}
      {{- end }}
    {{- end }}
    {{- if eq $currWorker (int $workerId) }}

    # Config for Syslog Logs Collection
    # Source config section to collect Syslog logs from /var/log/messages* using Fluentd tail plugin.
    <source>
       @type tail
       @id in_tail_syslog{{- ternary (print "_" $currWorker) "" $multiWorkersEnabled }}
       path_key tailed_path
       path {{ required "fluentd.linuxSystem.logs.syslog.path is required" $.Values.fluentd.linuxSystem.logs.syslog.path }}
       pos_file {{ $.Values.fluentd.baseDir }}/oci_la_fluentd_outplugin/pos/syslog.logs.pos
       tag oci{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.oke.syslog.messages.**
       read_from_head "{{ $.Values.fluentd.tailPlugin.readFromHead }}"
       {{- if $.Values.fluentd.linuxSystem.logs.syslog.encoding }}
       encoding {{ $.Values.fluentd.linuxSystem.logs.syslog.encoding }}
       {{- else if $.Values.fluentd.linuxSystem.encoding }}
       encoding {{ $.Values.fluentd.linuxSystem.encoding }}
       {{- else if $.Values.fluentd.tailPlugin.encoding }}
       encoding {{ $.Values.fluentd.tailPlugin.encoding }}
       {{- end }}
       <parse>
       @type multiline
       format_firstline {{ $.Values.fluentd.linuxSystem.logs.syslog.multilineStartRegExp }}
       format1 /^(?<message>.*)/
       </parse>
    </source>

    # Match block to filter kubelet logs from syslogs
    <match oci{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.oke.syslog.messages.**>
       @type rewrite_tag_filter
       hostname_command {{ (($.Values.fluentd).rewriteTagPlugin).hostname_command | default "cat /etc/hostname" }}
       <rule>
       key message
       pattern /kubelet:/
       tag oci{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.oke.syslog.kubelet.*
       </rule>
       <rule>
       key message
       pattern  /^((?!kubelet:).)*$/
       tag oci{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.oke.syslog.syslog.*
       </rule>
    </match>

    # Record transformer filter to apply Logging Analytics configuration to each record.
    <filter oci{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.oke.syslog.kubelet.**>
       @type record_transformer
       enable_ruby true
       <record>
       {{- if $.Values.fluentd.linuxSystem.logs.kubeletlog.metadata }}
       oci_la_metadata ${{"{{"}}"Kubernetes Cluster Name":"{{ $kubernetesClusterName }}", "Kubernetes Cluster ID": "{{ $kubernetesClusterId }}", "Node": "#{ENV['K8S_NODE_NAME'] || 'UNDEFINED'}" {{- range $k, $v := $.Values.fluentd.linuxSystem.logs.kubeletlog.metadata }},{{ $k | quote }}: {{ $v | quote -}} {{- end }}{{"}}"}}
       {{- else if $.Values.fluentd.linuxSystem.metadata }}
       oci_la_metadata ${{"{{"}}"Kubernetes Cluster Name":"{{ $kubernetesClusterName }}", "Kubernetes Cluster ID": "{{ $kubernetesClusterId }}", "Node": "#{ENV['K8S_NODE_NAME'] || 'UNDEFINED'}" {{- range $k, $v := $.Values.fluentd.linuxSystem.metadata }},{{ $k | quote }}: {{ $v | quote -}} {{- end }}{{"}}"}}
       {{- else }}
       oci_la_metadata ${{"{{"}}"Kubernetes Cluster Name":"{{ $kubernetesClusterName }}", "Kubernetes Cluster ID": "{{ $kubernetesClusterId }}", "Node": "#{ENV['K8S_NODE_NAME'] || 'UNDEFINED'}" {{- range $k, $v := $.Values.metadata }},{{ $k | quote }}: {{ $v | quote -}} {{- end }}{{"}}"}}
       {{- end }}
       {{- if $.Values.fluentd.linuxSystem.logs.kubeletlog.ociLALogGroupID }}
       oci_la_log_group_id "{{ $.Values.fluentd.linuxSystem.logs.kubeletlog.ociLALogGroupID }}"
       {{- else if $.Values.fluentd.linuxSystem.ociLALogGroupID }}
       oci_la_log_group_id "{{ $.Values.fluentd.linuxSystem.ociLALogGroupID }}"
       {{- else }}
       oci_la_log_group_id "{{ required "ociLALogGroupID is required" $.Values.ociLALogGroupID }}"
       {{- end }}
       oci_la_log_path "${record['tailed_path']}"
       oci_la_log_source_name "{{ required "fluentd.linuxSystem.logs.kubeletlog.ociLALogSourceName is required" $.Values.fluentd.linuxSystem.logs.kubeletlog.ociLALogSourceName }}"
       {{- if $.Values.fluentd.linuxSystem.logs.kubeletlog.ociLALogSet }}
       oci_la_log_set "{{ $.Values.fluentd.linuxSystem.logs.kubeletlog.ociLALogSet }}"
       {{- else }}
       oci_la_log_set "{{ $.Values.fluentd.linuxSystem.ociLALogSet | default $.Values.ociLALogSet }}"
       {{- end }}
       tag ${tag}
       </record>
    </filter>

    # Record transformer filter to apply Logging Analytics configuration to each record.
    <filter oci{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.oke.syslog.syslog.**>
       @type record_transformer
       enable_ruby true
       <record>
       {{- if $.Values.fluentd.linuxSystem.logs.syslog.metadata }}
       oci_la_metadata ${{"{{"}}"Kubernetes Cluster Name":"{{ $kubernetesClusterName }}", "Kubernetes Cluster ID": "{{ $kubernetesClusterId }}", "Node": "#{ENV['K8S_NODE_NAME'] || 'UNDEFINED'}" {{- range $k, $v := $.Values.fluentd.linuxSystem.logs.syslog.metadata }},{{ $k | quote }}: {{ $v | quote -}} {{- end }}{{"}}"}}
       {{- else if $.Values.fluentd.linuxSystem.metadata }}
       oci_la_metadata ${{"{{"}}"Kubernetes Cluster Name":"{{ $kubernetesClusterName }}", "Kubernetes Cluster ID": "{{ $kubernetesClusterId }}", "Node": "#{ENV['K8S_NODE_NAME'] || 'UNDEFINED'}" {{- range $k, $v := $.Values.fluentd.linuxSystem.metadata }},{{ $k | quote }}: {{ $v | quote -}} {{- end }}{{"}}"}}
       {{- else }}
       oci_la_metadata ${{"{{"}}"Kubernetes Cluster Name":"{{ $kubernetesClusterName }}", "Kubernetes Cluster ID": "{{ $kubernetesClusterId }}", "Node": "#{ENV['K8S_NODE_NAME'] || 'UNDEFINED'}" {{- range $k, $v := $.Values.metadata }},{{ $k | quote }}: {{ $v | quote -}} {{- end }}{{"}}"}}
       {{- end }}
       {{- if $.Values.fluentd.linuxSystem.logs.syslog.ociLALogGroupID }}
       oci_la_log_group_id "{{ $.Values.fluentd.linuxSystem.logs.syslog.ociLALogGroupID }}"
       {{- else if $.Values.fluentd.linuxSystem.ociLALogGroupID }}
       oci_la_log_group_id "{{ $.Values.fluentd.linuxSystem.ociLALogGroupID }}"
       {{- else }}
       oci_la_log_group_id "{{ required "ociLALogGroupID is required" $.Values.ociLALogGroupID }}"
       {{- end }}
       oci_la_log_path "${record['tailed_path']}"
       oci_la_log_source_name "{{ required "fluentd.linuxSystem.logs.syslog.ociLALogSourceName is required" $.Values.fluentd.linuxSystem.logs.syslog.ociLALogSourceName }}"
       {{- if $.Values.fluentd.linuxSystem.logs.syslog.ociLALogSet }}
       oci_la_log_set "{{ $.Values.fluentd.linuxSystem.logs.syslog.ociLALogSet }}"
       {{- else }}
       oci_la_log_set "{{ $.Values.fluentd.linuxSystem.ociLALogSet | default $.Values.ociLALogSet }}"
       {{- end }}
       tag ${tag}
       </record>
    </filter>
    {{- end }}
    {{- end }}

    # custom logs
    {{- if $.Values.fluentd.customLogs }}

    {{- range $name, $logDefinition := $.Values.fluentd.customLogs }}
    {{- $workerId := 0 }}
    {{- if $multiWorkersEnabled }}
      {{- if $logDefinition.worker }}
        {{ $workerId = $logDefinition.worker }}
      {{- end }}
    {{- end }}
    {{- if eq $currWorker (int $workerId) }}
    {{- if ne "false" ($logDefinition.isContainerLog | toString) }}
    {{ $pathToAppend := $logDefinition.path | quote }}
    {{-  $excludePath = printf "%s, %s" $excludePath $pathToAppend -}}
    {{- end }}
    <source>
       @type tail
       @id {{ $name }}{{- ternary (print "_" $currWorker) "" $multiWorkersEnabled }}
       path_key tailed_path
       path {{ $logDefinition.path | required (printf "fluentd.customLogs.%s.path is required" $name) }}
       pos_file {{ $.Values.fluentd.baseDir }}/oci_la_fluentd_outplugin/pos/{{ $name }}.logs.pos
       tag oci{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.oke.{{ $name }}.*
       read_from_head "{{ $.Values.fluentd.tailPlugin.readFromHead }}"
       {{- if $logDefinition.encoding }}
       encoding {{ $logDefinition.encoding }}
       {{- else if $.Values.fluentd.tailPlugin.encoding }}
       encoding {{ $.Values.fluentd.tailPlugin.encoding }}
       {{- end }}
       <parse>
       {{- if eq "false" ($logDefinition.isContainerLog | toString) }}
       {{- if $logDefinition.multilineStartRegExp }}
       @type multiline
       format_firstline {{ $logDefinition.multilineStartRegExp }}
       format1 /^(?<message>.*)/
       {{- else }}
       @type none
       {{- end }}
       {{- else }}
       {{- if eq $runtime "docker" }}
       @type json
       {{- else}}
       @type cri
       {{- end }}
       {{- end }}
       </parse>
    </source>
    # Record transformer filter to apply Logging Analytics configuration to each record.
    <filter oci{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.oke.{{ $name }}.**>
       @type record_transformer
       enable_ruby true
       <record>
       {{- if $logDefinition.metadata }}
       oci_la_metadata ${{"{{"}}"Kubernetes Cluster Name":"{{ $kubernetesClusterName }}", "Kubernetes Cluster ID": "{{ $kubernetesClusterId }}" {{- range $k, $v := $logDefinition.metadata }},{{ $k | quote }}: {{ $v | quote -}} {{- end }}{{"}}"}}
       {{- else }}
       oci_la_metadata ${{"{{"}}"Kubernetes Cluster Name":"{{ $kubernetesClusterName }}", "Kubernetes Cluster ID": "{{ $kubernetesClusterId }}" {{- range $k, $v := $.Values.metadata }},{{ $k | quote }}: {{ $v | quote -}} {{- end }}{{"}}"}}
       {{- end }}
       {{- if $logDefinition.ociLALogGroupID }}
       oci_la_log_group_id "{{ $logDefinition.ociLALogGroupID }}"
       {{- else }}
       oci_la_log_group_id "{{ required "ociLALogGroupID is required" $.Values.ociLALogGroupID }}"
       {{- end }}
       oci_la_log_path "${record['tailed_path']}"
       oci_la_log_source_name "{{ $logDefinition.ociLALogSourceName | required (printf "fluentd.customLogs.%s.ociLALogSourceName is required" $name) }}"
       oci_la_log_set "{{ $logDefinition.ociLALogSet | default $.Values.ociLALogSet }}"
       {{- if and (ne "false" ($logDefinition.isContainerLog | toString)) (eq $runtime "docker") }}
       message "${record['log']}"
       {{- end }}
       tag ${tag}
       </record>
    </filter>
    # Concat filter to handle partial logs in CRI/ContainerD
    # Docker can also have partial logs but handling is different for different docker versions. Considering Kubernetes/OKE moved to ContainerD/CRI since last 4-5 releases, ignoring docker handling.
    # This filter can not be clubbed with concat filter for multiline as both are mutually exclusive.
    {{- if and (ne "false" ($logDefinition.isContainerLog | toString)) (eq $runtime "cri") }}
    <filter oci{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.oke.{{ $name }}.**>
      @type concat
      key message
      use_partial_cri_logtag true
      partial_cri_logtag_key logtag
      partial_cri_stream_key stream
      # timeout scenario should not occur in general for partial logs handling
      timeout_label "@NORMAL{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}"
    </filter>
    {{- end }}
    {{- if and (ne "false" ($logDefinition.isContainerLog | toString)) ($logDefinition.multilineStartRegExp) }}
    # Concat filter to handle multi-line log records.
    <filter oci{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.oke.{{ $name }}.**>
       @type concat
       key message
       stream_identity_key stream
       flush_interval "{{ $.Values.fluentd.tailPlugin.flushInterval }}"
       timeout_label "@NORMAL{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}"
       multiline_start_regexp {{ $logDefinition.multilineStartRegExp }}
    </filter>
    {{- end }}
    {{- end }}
    {{- end }}
    {{- end }}

    #generic container logs
    {{- if $.Values.fluentd.genericContainerLogs }}

    {{- $workerId := 0 }}
    {{- if $multiWorkersEnabled }}
      {{- if $.Values.fluentd.genericContainerLogs.worker }}
        {{ $workerId = $.Values.fluentd.genericContainerLogs.worker }}
      {{- end }}
    {{- end }}
    {{- if eq $currWorker (int $workerId) }}

    # Config for Container Logs Collection (except for the ones which are specifically configured above)
    # Source config section to collect Container logs from /var/log/containers/*.log using Fluentd tail plugin.
    <source>
       @type tail
       @id in_tail_containerlogs{{- ternary (print "_" $currWorker) "" $multiWorkersEnabled }}
       path_key tailed_path
       path {{ required "fluentd.genericContainerLogs.path is required" $.Values.fluentd.genericContainerLogs.path }}
       pos_file {{ $.Values.fluentd.baseDir }}/oci_la_fluentd_outplugin/pos/containerlogs.logs.pos
       tag oci{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.oke.containerlogs.*
       read_from_head "{{ $.Values.fluentd.tailPlugin.readFromHead }}"
       # Modify the exclude path once a specific container log config is explictly defined to avoid duplicate collection.
       exclude_path [{{ $excludePath }}]
       {{- if $.Values.fluentd.genericContainerLogs.encoding }}
       encoding {{ $.Values.fluentd.genericContainerLogs.encoding }}
       {{- else if $.Values.fluentd.tailPlugin.encoding }}
       encoding {{ $.Values.fluentd.tailPlugin.encoding }}
       {{- end }}
       <parse>
       {{- if eq $runtime "docker" }}
       @type json
       {{- else}}
       @type cri
       {{- end }}
       </parse>
    </source>

    # Filter to add kubernetes metadata
    <filter oci{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.oke.containerlogs.**>
       @type kubernetes_metadata
       @id filter_kube_metadata_containerlogs{{- ternary (print "_" $currWorker) "" $multiWorkersEnabled }}
       {{- if $.Values.fluentd.kubernetesMetadataFilter.kubernetes_url }}
       kubernetes_url "{{ $.Values.fluentd.kubernetesMetadataFilter.kubernetes_url }}"
       {{- end }}
       verify_ssl "{{ $.Values.fluentd.kubernetesMetadataFilter.verify_ssl }}"
       {{- if $.Values.fluentd.kubernetesMetadataFilter.ca_file }}
       ca_file "{{ $.Values.fluentd.kubernetesMetadataFilter.ca_file }}"
       {{- end }}
       skip_labels "{{ $.Values.fluentd.kubernetesMetadataFilter.skip_labels }}"
       skip_container_metadata "{{ $.Values.fluentd.kubernetesMetadataFilter.skip_container_metadata }}"
       skip_master_url "{{ $.Values.fluentd.kubernetesMetadataFilter.skip_master_url }}"
       skip_namespace_metadata "{{ $.Values.fluentd.kubernetesMetadataFilter.skip_namespace_metadata }}"
       watch "{{ $.Values.fluentd.kubernetesMetadataFilter.watch }}"
       de_dot false
       annotation_match [ ".*" ]
    </filter>

    # Record transformer filter to apply Logging Analytics configuration to each record.
    <filter oci{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.oke.containerlogs.**>
       @type record_transformer
       enable_ruby true
       <record>
       {{- if $.Values.fluentd.genericContainerLogs.metadata }}
       oci_la_metadata ${{"{{"}}"Kubernetes Cluster Name":"{{ $kubernetesClusterName }}", "Kubernetes Cluster ID": "{{ $kubernetesClusterId }}" {{- range $k, $v := $.Values.fluentd.genericContainerLogs.metadata }},{{ $k | quote }}: {{ $v | quote -}} {{- end }}{{"}}"}}
       {{- else }}
       oci_la_metadata ${{"{{"}}"Kubernetes Cluster Name":"{{ $kubernetesClusterName }}", "Kubernetes Cluster ID": "{{ $kubernetesClusterId }}" {{- range $k, $v := $.Values.metadata }},{{ $k | quote }}: {{ $v | quote -}} {{- end }}{{"}}"}}
       {{- end }}
       oci_la_log_group_id ${record.dig("kubernetes", "annotations", "oracle.com/oci_la_log_group_id") ? record.dig("kubernetes", "annotations", "oracle.com/oci_la_log_group_id") : "{{ $.Values.fluentd.genericContainerLogs.ociLALogGroupID | default $.Values.ociLALogGroupID }}"}
       oci_la_log_path "${record['tailed_path']}"
       oci_la_log_source_name ${record.dig("kubernetes", "annotations", "oracle.com/oci_la_log_source_name") ? record.dig("kubernetes", "annotations", "oracle.com/oci_la_log_source_name") : "{{ $.Values.fluentd.genericContainerLogs.ociLALogSourceName | default "Kubernetes Container Generic Logs" }}"}
       oci_la_log_set ${record.dig("kubernetes", "annotations", "oracle.com/oci_la_log_set") ? record.dig("kubernetes", "annotations", "oracle.com/oci_la_log_set") : "{{ $.Values.fluentd.genericContainerLogs.ociLALogSet | default $.Values.ociLALogSet }}"}
       {{- if eq $runtime "docker" }}
       message "${record['log']}"
       {{- end }}
       tag ${tag}
       </record>
    </filter>

    # Concat filter to handle partial logs in CRI/ContainerD
    # Docker can also have partial logs but handling is different for different docker versions. Considering Kubernetes/OKE moved to ContainerD/CRI since last 4-5 releases, ignoring docker handling.
    # This filter can not be clubbed with concat filter for multiline as both are mutually exclusive.
    {{- if eq $runtime "cri" }}
    <filter oci{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.oke.containerlogs.**>
      @type concat
      key message
      use_partial_cri_logtag true
      partial_cri_logtag_key logtag
      partial_cri_stream_key stream
      # timeout scenario should not occur in general for partial logs handling
      timeout_label "@NORMAL{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}"
    </filter>
    {{- end }}
    {{- end }}
    {{- end }}

    #customFluentd config
    {{- if $.Values.fluentd.customFluentdConf }}
    {{- $workerId := 0 }} 
    {{- if eq $currWorker (int $workerId) }} 
    {{- include "common.tplvalues.render" (dict "value" $.Values.fluentd.customFluentdConf "context" $) | nindent 4 }}
    {{- end }}
    {{- end }}
    

    # Filter to add kubernetes metadata
    <filter oci{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.**>
       @type kubernetes_metadata
       @id filter_kube_metadata{{- ternary (print "_" $currWorker) "" $multiWorkersEnabled }}
       {{- if $.Values.fluentd.kubernetesMetadataFilter.kubernetes_url }}
       kubernetes_url "{{ $.Values.fluentd.kubernetesMetadataFilter.kubernetes_url }}"
       {{- end }}
       verify_ssl "{{ $.Values.fluentd.kubernetesMetadataFilter.verify_ssl }}"
       {{- if $.Values.fluentd.kubernetesMetadataFilter.ca_file }}
       ca_file "{{ $.Values.fluentd.kubernetesMetadataFilter.ca_file }}"
       {{- end }}
       skip_labels "{{ $.Values.fluentd.kubernetesMetadataFilter.skip_labels }}"
       skip_container_metadata "{{ $.Values.fluentd.kubernetesMetadataFilter.skip_container_metadata }}"
       skip_master_url "{{ $.Values.fluentd.kubernetesMetadataFilter.skip_master_url }}"
       skip_namespace_metadata "{{ $.Values.fluentd.kubernetesMetadataFilter.skip_namespace_metadata }}"
       watch "{{ $.Values.fluentd.kubernetesMetadataFilter.watch }}"
       de_dot false
       annotation_match [ ".*" ]
    </filter>

    # Match block to ensure all the logs including concat plugin timeout logs will have same label
    <match oci{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.**>
       @type relabel
       @label @NORMAL{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}
    </match>

    # Match block to set info required for oci-logging-analytics fluentd output plugin
    <label @NORMAL{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}>
       <match oci{{- ternary (print "." $currWorker) "" $multiWorkersEnabled }}.**>
          @type oci-logging-analytics
          enable_ruby               true
          namespace                 "{{ $.Values.ociLANamespace }}"
          endpoint                  "{{ $.Values.fluentd.ociLoggingAnalyticsOutputPlugin.endpoint }}"
          {{- if eq $authtype "config" }}
          config_file_location      {{ $.Values.oci.path }}/{{ $.Values.oci.file }}
          profile_name              "{{ $.Values.fluentd.ociLoggingAnalyticsOutputPlugin.profile_name }}"
          {{- end }}
          plugin_log_location       "{{ $.Values.fluentd.baseDir }}"
          plugin_log_level          "{{ $.Values.fluentd.ociLoggingAnalyticsOutputPlugin.plugin_log_level }}"
          plugin_log_file_size      "{{ $.Values.fluentd.ociLoggingAnalyticsOutputPlugin.plugin_log_file_size }}"
          plugin_log_file_count     "{{ $.Values.fluentd.ociLoggingAnalyticsOutputPlugin.plugin_log_file_count }}"
          # TODO
          kubernetes_metadata_keys_mapping     {"container_name":"Container","namespace_name":"Namespace","pod_name":"Pod","container_image":"Container Image Name","host":"Node"}
          <buffer>
                @type                           file
                path                            {{ $.Values.fluentd.baseDir }}/oci_la_fluentd_outplugin/logs/buffer{{- ternary (print "/worker-" $currWorker) "" $multiWorkersEnabled }}/
                flush_thread_count              "{{ $.Values.fluentd.ociLoggingAnalyticsOutputPlugin.buffer.flush_thread_count }}"
                chunk_limit_size                "2m"
                total_limit_size                "{{ $.Values.fluentd.ociLoggingAnalyticsOutputPlugin.buffer.total_limit_size }}"
                flush_interval                  "{{ $.Values.fluentd.ociLoggingAnalyticsOutputPlugin.buffer.flush_interval }}"
                flush_thread_interval           "{{ $.Values.fluentd.ociLoggingAnalyticsOutputPlugin.buffer.flush_thread_interval }}"
                flush_thread_burst_interval     "{{ $.Values.fluentd.ociLoggingAnalyticsOutputPlugin.buffer.flush_thread_burst_interval }}"
                retry_wait                      "{{ $.Values.fluentd.ociLoggingAnalyticsOutputPlugin.buffer.retry_wait }}"
                retry_max_times                 "{{ $.Values.fluentd.ociLoggingAnalyticsOutputPlugin.buffer.retry_max_times }}"
                retry_exponential_backoff_base  "{{ $.Values.fluentd.ociLoggingAnalyticsOutputPlugin.buffer.retry_exponential_backoff_base }}"
                retry_forever                   "{{ $.Values.fluentd.ociLoggingAnalyticsOutputPlugin.buffer.retry_forever }}"
                disable_chunk_backup "{{ $.Values.fluentd.ociLoggingAnalyticsOutputPlugin.buffer.disable_chunk_backup }}"
          </buffer>
       </match>
    </label>

    {{- if $multiWorkersEnabled }}  
          
    </worker>
    {{- end }}
    {{- end }} 

