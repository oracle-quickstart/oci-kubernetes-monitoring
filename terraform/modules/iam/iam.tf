# Copyright (c) 2023, 2024, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v1.0 as shown at https://oss.oracle.com/licenses/upl.

locals {
  cluster_ocid_md5 = md5(var.oke_cluster_ocid)

  # Dynamic Group
  dynamic_group_name            = "oci-kubernetes-monitoring-${local.cluster_ocid_md5}"
  dynamic_group_desc            = "Auto generated by Resource Manager Stack - oci-kubernetes-monitoring. Required for monitoring OKE Cluster - ${var.oke_cluster_ocid}"
  instances_in_compartment_rule = ["ALL {instance.compartment.id = '${var.oke_compartment_ocid}'}"]
  management_agent_rule         = ["ALL {resource.type='managementagent', resource.compartment.id='${var.oci_onm_compartment_ocid}'}"]
  dynamic_group_matching_rules  = concat(local.instances_in_compartment_rule, local.management_agent_rule)
  complied_dynamic_group_rules  = "ANY {${join(",", local.dynamic_group_matching_rules)}}"
  defined_namespaces            = join(",", [for namespace in module.tag_namespaces.namespaces : "target.tag-namespace.name='${namespace}'"])
  tags_policy_where_clause      = length(var.tags.definedTags) == 0 ? "" : "where any {${local.defined_namespaces}}"

  # Policy
  policy_name = "oci-kubernetes-monitoring-${local.cluster_ocid_md5}"
  policy_desc = "Auto generated by Resource Manager Stack - oci-kubernetes-monitoring. Allows Fluentd and MgmtAgent Pods running inside Kubernetes Cluster to send the data to OCI Log Analytics and OCI Monitoring respectively."

  onm_compartment_scope = var.root_compartment_ocid == var.oci_onm_compartment_ocid ? "tenancy" : "compartment id ${var.oci_onm_compartment_ocid}"
  oke_compartment_scope = var.root_compartment_ocid == var.oke_compartment_ocid ? "tenancy" : "compartment id ${var.oke_compartment_ocid}"

  # Conditions: https://docs.oracle.com/en-us/iaas/Content/Identity/policysyntax/conditions.htm#top
  # https://docs.public.oneportal.content.oci.oraclecloud.com/en-us/iaas/Content/Identity/policyreference/policyreference_topic-General_Variables_for_All_Requests.htm
  # service_connector_where_clause = "where all {request.principal.type='serviceconnector', target.resource.compartment.id='${local.onm_compartment_scope}'}"

  policy_stmts = {
    metric_upload = ["Allow dynamic-group ${local.dynamic_group_name} to use METRICS in ${local.onm_compartment_scope} WHERE target.metrics.namespace = 'mgmtagent_kubernetes_metrics'"],
    log_upload    = ["Allow dynamic-group ${local.dynamic_group_name} to {LOG_ANALYTICS_LOG_GROUP_UPLOAD_LOGS} in ${local.onm_compartment_scope}"],
    discovery_api = ["Allow dynamic-group ${local.dynamic_group_name} to {LOG_ANALYTICS_DISCOVERY_UPLOAD} in tenancy"],
    tag_namespace = ["Allow dynamic-group ${local.dynamic_group_name} to use tag-namespaces in tenancy ${local.tags_policy_where_clause}"]
    infra_discovery_stmt = [
      # Allows log analytics service to query OKE infra resources
      # TODO: check if CLUSTER_READ will lead to duplicate ENTITY creation via service connector flow
      # Ref - https://docs.oracle.com/en-us/iaas/log-analytics/doc/ingest-logs-other-oci-services-using-service-connector.html#LOGAN-GUID-3848C538-28AC-4F53-B217-90129278D84F
      "Allow resource loganalyticsvrp LogAnalyticsVirtualResource to {VCN_READ,SUBNET_READ,LOAD_BALANCER_READ,CLUSTER_READ,VNIC_READ} in ${local.oke_compartment_scope}",
      # https://docs.oracle.com/en-us/iaas/Content/Identity/Reference/contengpolicyreference.htm
      "Allow dynamic-group ${local.dynamic_group_name} to {CLUSTER_READ} in ${local.oke_compartment_scope} where target.cluster.id='${var.oke_cluster_ocid}'",
      "Allow dynamic-group ${local.dynamic_group_name} to read cluster-node-pools in ${local.oke_compartment_scope}",
      # https://docs.oracle.com/en-us/iaas/Content/Identity/Reference/corepolicyreference.htm
      # Note: Customers will need to create additional policies to support subnets discovery and Flow Logs collection from non-OKE compartments
      "Allow dynamic-group ${local.dynamic_group_name} to inspect vcns in ${local.oke_compartment_scope}",
      "Allow dynamic-group ${local.dynamic_group_name} to inspect subnets in ${local.oke_compartment_scope}",
      "Allow dynamic-group ${local.dynamic_group_name} to read load-balancers in ${local.oke_compartment_scope}"
    ],
    # Note:
    # In Order to read data from an existing log-group (which can be part of any compartment),
    # We must allow read access in, at least, both ONM and OKE compartments
    # Compartment of Logging LogGroup is not known at the time of policy creation via stack
    # We assume that Logging Log Groups are only created in either OKE or ONM compartments
    service_discovery_stmt = var.create_service_discovery_policies ? distinct([
      # Required to trigger service discovery
      "Allow dynamic-group ${local.dynamic_group_name} to read loganalytics-entity in ${local.onm_compartment_scope}",

      # Required to create logging log-group
      "Allow dynamic-group ${local.dynamic_group_name} to manage log-groups in ${local.onm_compartment_scope}",
      # Use is sufficient in case log-group is already created and part of OKE compartment
      "Allow dynamic-group ${local.dynamic_group_name} to use log-groups in ${local.oke_compartment_scope}",

      # Required for RMS resources
      "Allow dynamic-group ${local.dynamic_group_name} to manage orm-stacks in ${local.onm_compartment_scope}",
      "Allow dynamic-group ${local.dynamic_group_name} to manage orm-jobs in ${local.onm_compartment_scope}",

      # Required to enable logging
      "Allow dynamic-group ${local.dynamic_group_name} to {SUBNET_UPDATE} in ${local.onm_compartment_scope}",
      "Allow dynamic-group ${local.dynamic_group_name} to {SUBNET_UPDATE} in ${local.oke_compartment_scope}",
      "Allow dynamic-group ${local.dynamic_group_name} to {CLUSTER_UPDATE} in ${local.oke_compartment_scope}",
      "Allow dynamic-group ${local.dynamic_group_name} to use load-balancers in ${local.onm_compartment_scope}",
      "Allow dynamic-group ${local.dynamic_group_name} to use load-balancers in ${local.oke_compartment_scope}",

      # Required to create service connector
      "Allow dynamic-group ${local.dynamic_group_name} to manage serviceconnectors in ${local.onm_compartment_scope}",
      "Allow dynamic-group ${local.dynamic_group_name} to read log-content in ${local.onm_compartment_scope}",
      "Allow dynamic-group ${local.dynamic_group_name} to read log-content in ${local.oke_compartment_scope}",

      # Required to configure service connector
      # https://docs.oracle.com/en-us/iaas/Content/Identity/Reference/lbpolicyreference.htm
      "Allow any-user to {LOG_ANALYTICS_LOG_GROUP_UPLOAD_LOGS} in ${local.onm_compartment_scope} where all {request.principal.type='serviceconnector', request.principal.compartment.id='${var.oci_onm_compartment_ocid}'}"
    ]) : []
  }

  combined_policy_statements = distinct(flatten([for policy, stmt in local.policy_stmts : stmt]))
}

# https://docs.oracle.com/en-us/iaas/api/#/en/identity/20160918/DynamicGroup/
resource "oci_identity_dynamic_group" "oke_dynamic_group" {
  name           = local.dynamic_group_name
  description    = local.dynamic_group_desc
  compartment_id = var.root_compartment_ocid
  matching_rule  = local.complied_dynamic_group_rules

  #tags
  defined_tags  = var.tags.definedTags
  freeform_tags = var.tags.freeformTags

  lifecycle {
    ignore_changes = [defined_tags, freeform_tags]
  }
}

# https://docs.oracle.com/en-us/iaas/api/#/en/identity/20160918/Policy/
resource "oci_identity_policy" "oke_monitoring_policy" {
  name           = local.policy_name
  description    = local.policy_desc
  compartment_id = var.root_compartment_ocid
  statements     = local.combined_policy_statements

  #tags
  defined_tags  = var.tags.definedTags
  freeform_tags = var.tags.freeformTags

  lifecycle {
    ignore_changes = [defined_tags, freeform_tags]
  }

  depends_on = [oci_identity_dynamic_group.oke_dynamic_group]
}

# Parse defined tags
module "tag_namespaces" {
  source      = "./parse_namespaces"
  definedTags = var.tags.definedTags
}